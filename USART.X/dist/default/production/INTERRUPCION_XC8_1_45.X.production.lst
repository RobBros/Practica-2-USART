

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 25 23:35:57 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F873A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F873A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114                           
   115                           	psect	strings
   116  0180                     __pstrings:	
   117  0180                     stringtab:	
   118  0180                     __stringtab:	
   119  0180                     stringcode:	
   120                           ;	String table - string pointers are 1 byte each
   121                           
   122  0180                     stringdir:	
   123  0180  3001               	movlw	high stringdir
   124  0181  008A               	movwf	10
   125  0182  0804               	movf	4,w
   126  0183  0A84               	incf	4,f
   127  0184  0782               	addwf	2,f
   128  0185                     __stringbase:	
   129  0185  3400               	retlw	0
   130  0186                     __end_of__stringtab:	
   131  0186                     _dpowers:	
   132  0186  3401               	retlw	1
   133  0187  3400               	retlw	0
   134  0188  340A               	retlw	10
   135  0189  3400               	retlw	0
   136  018A  3464               	retlw	100
   137  018B  3400               	retlw	0
   138  018C  34E8               	retlw	232
   139  018D  3403               	retlw	3
   140  018E  3410               	retlw	16
   141  018F  3427               	retlw	39
   142  0190                     __end_of_dpowers:	
   143  000B                     _INTCONbits	set	11
   144  0019                     _TXREG	set	25
   145  001A                     _RCREG	set	26
   146  000C                     _PIR1bits	set	12
   147  0018                     _RCSTAbits	set	24
   148  0081                     _OPTION_REGbits	set	129
   149  008C                     _PIE1bits	set	140
   150  0099                     _SPBRG	set	153
   151  0098                     _TXSTAbits	set	152
   152  0087                     _TRISCbits	set	135
   153  0190                     STR_2:	
   154  0190  3420               	retlw	32	;' '
   155  0191  3449               	retlw	73	;'I'
   156  0192  346E               	retlw	110	;'n'
   157  0193  3474               	retlw	116	;'t'
   158  0194  3465               	retlw	101	;'e'
   159  0195  3472               	retlw	114	;'r'
   160  0196  3475               	retlw	117	;'u'
   161  0197  3470               	retlw	112	;'p'
   162  0198  3463               	retlw	99	;'c'
   163  0199  3469               	retlw	105	;'i'
   164  019A  346F               	retlw	111	;'o'
   165  019B  346E               	retlw	110	;'n'
   166  019C  3420               	retlw	32	;' '
   167  019D  3465               	retlw	101	;'e'
   168  019E  346E               	retlw	110	;'n'
   169  019F  3420               	retlw	32	;' '
   170  01A0  3452               	retlw	82	;'R'
   171  01A1  3458               	retlw	88	;'X'
   172  01A2  3420               	retlw	32	;' '
   173  01A3  3455               	retlw	85	;'U'
   174  01A4  3453               	retlw	83	;'S'
   175  01A5  3441               	retlw	65	;'A'
   176  01A6  3452               	retlw	82	;'R'
   177  01A7  3454               	retlw	84	;'T'
   178  01A8  3420               	retlw	32	;' '
   179  01A9  340A               	retlw	10
   180  01AA  340D               	retlw	13
   181  01AB  3400               	retlw	0
   182  01AC                     STR_1:	
   183  01AC  3449               	retlw	73	;'I'
   184  01AD  346E               	retlw	110	;'n'
   185  01AE  3474               	retlw	116	;'t'
   186  01AF  3465               	retlw	101	;'e'
   187  01B0  3472               	retlw	114	;'r'
   188  01B1  3475               	retlw	117	;'u'
   189  01B2  3470               	retlw	112	;'p'
   190  01B3  3463               	retlw	99	;'c'
   191  01B4  3469               	retlw	105	;'i'
   192  01B5  346F               	retlw	111	;'o'
   193  01B6  346E               	retlw	110	;'n'
   194  01B7  3420               	retlw	32	;' '
   195  01B8  3465               	retlw	101	;'e'
   196  01B9  346E               	retlw	110	;'n'
   197  01BA  3420               	retlw	32	;' '
   198  01BB  3452               	retlw	82	;'R'
   199  01BC  3442               	retlw	66	;'B'
   200  01BD  3430               	retlw	48	;'0'
   201  01BE  3420               	retlw	32	;' '
   202  01BF  340A               	retlw	10
   203  01C0  340D               	retlw	13
   204  01C1  3400               	retlw	0
   205  01C2                     STR_3:	
   206  01C2  3445               	retlw	69	;'E'
   207  01C3  346C               	retlw	108	;'l'
   208  01C4  3420               	retlw	32	;' '
   209  01C5  346E               	retlw	110	;'n'
   210  01C6  3475               	retlw	117	;'u'
   211  01C7  346D               	retlw	109	;'m'
   212  01C8  3465               	retlw	101	;'e'
   213  01C9  3472               	retlw	114	;'r'
   214  01CA  346F               	retlw	111	;'o'
   215  01CB  3420               	retlw	32	;' '
   216  01CC  3465               	retlw	101	;'e'
   217  01CD  3473               	retlw	115	;'s'
   218  01CE  3420               	retlw	32	;' '
   219  01CF  3425               	retlw	37	;'%'
   220  01D0  3464               	retlw	100	;'d'
   221  01D1  340A               	retlw	10
   222  01D2  340D               	retlw	13
   223  01D3  3400               	retlw	0
   224                           
   225                           ; #config settings
   226  0000                     
   227                           	psect	cinit
   228  0013                     start_initialization:	
   229  0013                     __initialization:	
   230  0013                     end_of_initialization:	
   231                           ;End of C runtime variable initialization code
   232                           
   233  0013                     __end_of__initialization:	
   234  0013  0183               	clrf	3
   235  0014  118A  2AB8         	ljmp	_main	;jump to C main() function
   236                           
   237                           	psect	cstackCOMMON
   238  0000                     __pcstackCOMMON:	
   239  0000                     ??_UART_init:	
   240  0000                     ??_UART_write:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0000                     ??_putch:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0000                     ??i1_UART_write:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0000                     ??i1_putch:	
   250                           ; 1 bytes @ 0x0
   251                           
   252                           
   253                           	psect	cstackBANK0
   254  0020                     __pcstackBANK0:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0020                     ?_UART_init:	
   258  0020                     ?_UART_write:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0020                     ?_putch:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0020                     ?_Interrupcion:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0020                     ?_main:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0020                     ?i1_UART_write:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0020                     ?i1_putch:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0020                     ?i1_printf:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0020                     ?i1___lwdiv:	
   280                           ; 2 bytes @ 0x0
   281                           
   282  0020                     i1UART_write@dato:	
   283                           ; 2 bytes @ 0x0
   284                           
   285  0020                     i1___lwdiv@divisor:	
   286                           ; 1 bytes @ 0x0
   287                           
   288                           
   289                           ; 2 bytes @ 0x0
   290  0020                     	ds	1
   291  0021                     i1putch@txDato:	
   292                           
   293                           ; 1 bytes @ 0x1
   294  0021                     	ds	1
   295  0022                     i1___lwdiv@dividend:	
   296                           
   297                           ; 2 bytes @ 0x2
   298  0022                     	ds	2
   299  0024                     ??i1___lwdiv:	
   300                           
   301                           ; 1 bytes @ 0x4
   302  0024                     	ds	1
   303  0025                     i1___lwdiv@quotient:	
   304                           
   305                           ; 2 bytes @ 0x5
   306  0025                     	ds	2
   307  0027                     i1___lwdiv@counter:	
   308                           
   309                           ; 1 bytes @ 0x7
   310  0027                     	ds	1
   311  0028                     ?i1___lwmod:	
   312  0028                     i1___lwmod@divisor:	
   313                           ; 2 bytes @ 0x8
   314                           
   315                           
   316                           ; 2 bytes @ 0x8
   317  0028                     	ds	2
   318  002A                     i1___lwmod@dividend:	
   319                           
   320                           ; 2 bytes @ 0xA
   321  002A                     	ds	2
   322  002C                     ??i1___lwmod:	
   323                           
   324                           ; 1 bytes @ 0xC
   325  002C                     	ds	1
   326  002D                     i1___lwmod@counter:	
   327                           
   328                           ; 1 bytes @ 0xD
   329  002D                     	ds	1
   330  002E                     ??i1_printf:	
   331                           
   332                           ; 1 bytes @ 0xE
   333  002E                     	ds	3
   334  0031                     i1printf@f:	
   335                           
   336                           ; 1 bytes @ 0x11
   337  0031                     	ds	1
   338  0032                     i1printf@ap:	
   339                           
   340                           ; 1 bytes @ 0x12
   341  0032                     	ds	1
   342  0033                     i1printf@flag:	
   343                           
   344                           ; 1 bytes @ 0x13
   345  0033                     	ds	1
   346  0034                     i1printf@prec:	
   347                           
   348                           ; 1 bytes @ 0x14
   349  0034                     	ds	1
   350  0035                     i1printf@val:	
   351                           
   352                           ; 2 bytes @ 0x15
   353  0035                     	ds	2
   354  0037                     i1printf@c:	
   355                           
   356                           ; 1 bytes @ 0x17
   357  0037                     	ds	1
   358  0038                     ??_Interrupcion:	
   359                           
   360                           ; 1 bytes @ 0x18
   361  0038                     	ds	5
   362  003D                     Interrupcion@dataRX:	
   363                           
   364                           ; 1 bytes @ 0x1D
   365  003D                     	ds	1
   366  003E                     ?___lwdiv:	
   367  003E                     UART_write@dato:	
   368                           ; 2 bytes @ 0x1E
   369                           
   370  003E                     ___lwdiv@divisor:	
   371                           ; 1 bytes @ 0x1E
   372                           
   373                           
   374                           ; 2 bytes @ 0x1E
   375  003E                     	ds	1
   376  003F                     putch@txDato:	
   377                           
   378                           ; 1 bytes @ 0x1F
   379  003F                     	ds	1
   380  0040                     ___lwdiv@dividend:	
   381                           
   382                           ; 2 bytes @ 0x20
   383  0040                     	ds	2
   384  0042                     ??___lwdiv:	
   385                           
   386                           ; 1 bytes @ 0x22
   387  0042                     	ds	1
   388  0043                     ___lwdiv@quotient:	
   389                           
   390                           ; 2 bytes @ 0x23
   391  0043                     	ds	2
   392  0045                     ___lwdiv@counter:	
   393                           
   394                           ; 1 bytes @ 0x25
   395  0045                     	ds	1
   396  0046                     ?___lwmod:	
   397  0046                     ___lwmod@divisor:	
   398                           ; 2 bytes @ 0x26
   399                           
   400                           
   401                           ; 2 bytes @ 0x26
   402  0046                     	ds	2
   403  0048                     ___lwmod@dividend:	
   404                           
   405                           ; 2 bytes @ 0x28
   406  0048                     	ds	2
   407  004A                     ??___lwmod:	
   408                           
   409                           ; 1 bytes @ 0x2A
   410  004A                     	ds	1
   411  004B                     ___lwmod@counter:	
   412                           
   413                           ; 1 bytes @ 0x2B
   414  004B                     	ds	1
   415  004C                     ?_printf:	
   416                           
   417                           ; 2 bytes @ 0x2C
   418  004C                     	ds	2
   419  004E                     ??_printf:	
   420                           
   421                           ; 1 bytes @ 0x2E
   422  004E                     	ds	3
   423  0051                     printf@ap:	
   424                           
   425                           ; 1 bytes @ 0x31
   426  0051                     	ds	1
   427  0052                     printf@flag:	
   428                           
   429                           ; 1 bytes @ 0x32
   430  0052                     	ds	1
   431  0053                     printf@prec:	
   432                           
   433                           ; 1 bytes @ 0x33
   434  0053                     	ds	1
   435  0054                     printf@f:	
   436                           
   437                           ; 1 bytes @ 0x34
   438  0054                     	ds	1
   439  0055                     printf@val:	
   440                           
   441                           ; 2 bytes @ 0x35
   442  0055                     	ds	2
   443  0057                     printf@c:	
   444                           
   445                           ; 1 bytes @ 0x37
   446  0057                     	ds	1
   447  0058                     ??_main:	
   448                           
   449                           ; 1 bytes @ 0x38
   450  0058                     	ds	3
   451  005B                     main@numero:	
   452                           
   453                           ; 1 bytes @ 0x3B
   454  005B                     	ds	1
   455                           
   456                           	psect	maintext
   457  02B8                     __pmaintext:	
   458 ;;
   459 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   460 ;;
   461 ;; *************** function _main *****************
   462 ;; Defined at:
   463 ;;		line 41 in file "main.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;		None
   466 ;; Auto vars:     Size  Location     Type
   467 ;;  numero          1   59[BANK0 ] unsigned char 
   468 ;; Return value:  Size  Location     Type
   469 ;;                  1    wreg      void 
   470 ;; Registers used:
   471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   472 ;; Tracked objects:
   473 ;;		On entry : B00/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMMON   BANK0   BANK1
   477 ;;      Params:         0       0       0
   478 ;;      Locals:         0       1       0
   479 ;;      Temps:          0       3       0
   480 ;;      Totals:         0       4       0
   481 ;;Total ram usage:        4 bytes
   482 ;; Hardware stack levels required when called:    7
   483 ;; This function calls:
   484 ;;		_UART_init
   485 ;;		_printf
   486 ;; This function is called by:
   487 ;;		Startup code after reset
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491                           
   492                           ;psect for function _main
   493  02B8                     _main:	
   494                           
   495                           ;main.c: 43: UART_init();
   496                           
   497                           ;incstack = 0
   498                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   499  02B8  118A  230D  118A   	fcall	_UART_init
   500                           
   501                           ;main.c: 44: char numero = 0;
   502  02BB  1283               	bcf	3,5	;RP0=0, select bank0
   503  02BC  1303               	bcf	3,6	;RP1=0, select bank0
   504  02BD  01DB               	clrf	main@numero
   505                           
   506                           ;main.c: 46: INTCONbits.GIE = 1;
   507  02BE  178B               	bsf	11,7	;volatile
   508                           
   509                           ;main.c: 47: INTCONbits.PEIE = 1;
   510  02BF  170B               	bsf	11,6	;volatile
   511                           
   512                           ;main.c: 48: INTCONbits.INTE = 1;
   513  02C0  160B               	bsf	11,4	;volatile
   514                           
   515                           ;main.c: 49: PIE1bits.RCIE = 1;
   516  02C1  1683               	bsf	3,5	;RP0=1, select bank1
   517  02C2  1303               	bcf	3,6	;RP1=0, select bank1
   518  02C3  168C               	bsf	12,5	;volatile
   519                           
   520                           ;main.c: 51: OPTION_REGbits.INTEDG = 1;
   521  02C4  1701               	bsf	1,6	;volatile
   522  02C5                     l1059:	
   523                           ;main.c: 53: while(1){
   524                           
   525                           
   526                           ;main.c: 55: printf("El numero es %d\n\r", numero++);
   527  02C5  1283               	bcf	3,5	;RP0=0, select bank0
   528  02C6  1303               	bcf	3,6	;RP1=0, select bank0
   529  02C7  085B               	movf	main@numero,w
   530  02C8  00D8               	movwf	??_main
   531  02C9  01D9               	clrf	??_main+1
   532  02CA  0858               	movf	??_main,w
   533  02CB  00CC               	movwf	?_printf
   534  02CC  0859               	movf	??_main+1,w
   535  02CD  00CD               	movwf	?_printf+1
   536  02CE  303D               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   537  02CF  118A  2016  118A   	fcall	_printf
   538  02D2  3001               	movlw	1
   539  02D3  1283               	bcf	3,5	;RP0=0, select bank0
   540  02D4  1303               	bcf	3,6	;RP1=0, select bank0
   541  02D5  00D8               	movwf	??_main
   542  02D6  0858               	movf	??_main,w
   543  02D7  07DB               	addwf	main@numero,f
   544                           
   545                           ;main.c: 56: _delay((unsigned long)((1000)*(20000000/4000.0)));
   546  02D8  301A               	movlw	26
   547  02D9  1283               	bcf	3,5	;RP0=0, select bank0
   548  02DA  1303               	bcf	3,6	;RP1=0, select bank0
   549  02DB  00DA               	movwf	??_main+2
   550  02DC  305E               	movlw	94
   551  02DD  00D9               	movwf	??_main+1
   552  02DE  306E               	movlw	110
   553  02DF  00D8               	movwf	??_main
   554  02E0                     u967:	
   555  02E0  0BD8               	decfsz	??_main,f
   556  02E1  2AE0               	goto	u967
   557  02E2  0BD9               	decfsz	??_main+1,f
   558  02E3  2AE0               	goto	u967
   559  02E4  0BDA               	decfsz	??_main+2,f
   560  02E5  2AE0               	goto	u967
   561  02E6  2AC5               	goto	l1059
   562  02E7                     __end_of_main:	
   563                           ;main.c: 58: }
   564                           ;main.c: 59: return;
   565                           
   566                           
   567                           	psect	text1
   568  0016                     __ptext1:	
   569 ;; *************** function _printf *****************
   570 ;; Defined at:
   571 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;  f               1    wreg     PTR const unsigned char 
   574 ;;		 -> STR_3(18), STR_2(28), STR_1(22), 
   575 ;; Auto vars:     Size  Location     Type
   576 ;;  f               1   52[BANK0 ] PTR const unsigned char 
   577 ;;		 -> STR_3(18), STR_2(28), STR_1(22), 
   578 ;;  tmpval          4    0        struct .
   579 ;;  val             2   53[BANK0 ] unsigned int 
   580 ;;  cp              2    0        PTR const unsigned char 
   581 ;;  len             2    0        unsigned int 
   582 ;;  c               1   55[BANK0 ] char 
   583 ;;  prec            1   51[BANK0 ] char 
   584 ;;  flag            1   50[BANK0 ] unsigned char 
   585 ;;  ap              1   49[BANK0 ] PTR void [1]
   586 ;;		 -> ?i1_printf(2), ?_printf(2), 
   587 ;; Return value:  Size  Location     Type
   588 ;;                  2   44[BANK0 ] int 
   589 ;; Registers used:
   590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   591 ;; Tracked objects:
   592 ;;		On entry : 0/0
   593 ;;		On exit  : 0/0
   594 ;;		Unchanged: 0/0
   595 ;; Data sizes:     COMMON   BANK0   BANK1
   596 ;;      Params:         0       2       0
   597 ;;      Locals:         0       7       0
   598 ;;      Temps:          0       3       0
   599 ;;      Totals:         0      12       0
   600 ;;Total ram usage:       12 bytes
   601 ;; Hardware stack levels used:    1
   602 ;; Hardware stack levels required when called:    6
   603 ;; This function calls:
   604 ;;		___lwdiv
   605 ;;		___lwmod
   606 ;;		_putch
   607 ;; This function is called by:
   608 ;;		_main
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612                           
   613                           ;psect for function _printf
   614  0016                     _printf:	
   615                           
   616                           ;incstack = 0
   617                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   618                           ;printf@f stored from wreg
   619  0016  1283               	bcf	3,5	;RP0=0, select bank0
   620  0017  1303               	bcf	3,6	;RP1=0, select bank0
   621  0018  00D4               	movwf	printf@f
   622                           
   623                           ;doprnt.c: 466: va_list ap;
   624                           ;doprnt.c: 499: signed char c;
   625                           ;doprnt.c: 506: signed char prec;
   626                           ;doprnt.c: 508: unsigned char flag;
   627                           ;doprnt.c: 523: union {
   628                           ;doprnt.c: 524: unsigned long vd;
   629                           ;doprnt.c: 525: double integ;
   630                           ;doprnt.c: 526: } tmpval;
   631                           ;doprnt.c: 528: unsigned int val;
   632                           ;doprnt.c: 529: unsigned len;
   633                           ;doprnt.c: 530: const char * cp;
   634                           ;doprnt.c: 533: *ap = __va_start();
   635  0019  304C               	movlw	(low (?_printf| 0))& (0+255)
   636  001A  00CE               	movwf	??_printf
   637  001B  084E               	movf	??_printf,w
   638  001C  00D1               	movwf	printf@ap
   639  001D                     l973:	
   640                           ;doprnt.c: 536: while(c = *f++) {
   641                           
   642  001D  3001               	movlw	1
   643  001E  1283               	bcf	3,5	;RP0=0, select bank0
   644  001F  1303               	bcf	3,6	;RP1=0, select bank0
   645  0020  07D4               	addwf	printf@f,f
   646  0021  30FF               	movlw	-1
   647  0022  0754               	addwf	printf@f,w
   648  0023  0084               	movwf	4
   649  0024  118A  2180  118A   	fcall	stringdir
   650  0027  00CE               	movwf	??_printf
   651  0028  084E               	movf	??_printf,w
   652  0029  00D7               	movwf	printf@c
   653  002A  0857               	movf	printf@c,w
   654  002B  1903               	btfsc	3,2
   655  002C  0008               	return
   656                           
   657                           ;doprnt.c: 538: if(c != '%')
   658  002D  3025               	movlw	37
   659  002E  0657               	xorwf	printf@c,w
   660  002F  1903               	btfsc	3,2
   661  0030  2836               	goto	l933
   662                           
   663                           ;doprnt.c: 540: {
   664                           ;doprnt.c: 541: (putch(c) );
   665  0031  0857               	movf	printf@c,w
   666  0032  118A  2334  118A   	fcall	_putch
   667                           
   668                           ;doprnt.c: 542: continue;
   669  0035  281D               	goto	l973
   670  0036                     l933:	
   671                           
   672                           ;doprnt.c: 543: }
   673                           ;doprnt.c: 548: flag = 0;
   674  0036  1283               	bcf	3,5	;RP0=0, select bank0
   675  0037  1303               	bcf	3,6	;RP1=0, select bank0
   676  0038  01D2               	clrf	printf@flag
   677                           
   678                           ;doprnt.c: 822: }
   679                           
   680                           ;doprnt.c: 813: continue;
   681                           
   682                           ;doprnt.c: 802: default:
   683                           
   684                           ;doprnt.c: 698: case 'i':
   685                           ;doprnt.c: 699: break;
   686                           
   687                           ;doprnt.c: 697: case 'd':
   688                           
   689                           ;doprnt.c: 638: goto alldone;
   690                           
   691                           ;doprnt.c: 637: case 0:
   692                           
   693                           ;doprnt.c: 635: switch(c = *f++) {
   694  0039  3001               	movlw	1
   695  003A  07D4               	addwf	printf@f,f
   696  003B  30FF               	movlw	-1
   697  003C  0754               	addwf	printf@f,w
   698  003D  0084               	movwf	4
   699  003E  118A  2180  118A   	fcall	stringdir
   700  0041  00D7               	movwf	printf@c
   701                           
   702                           ; Switch size 1, requested type "space"
   703                           ; Number of cases is 3, Range of values is 0 to 105
   704                           ; switch strategies available:
   705                           ; Name         Instructions Cycles
   706                           ; simple_byte           10     6 (average)
   707                           ; direct_byte          219     7 (fixed)
   708                           ; jumptable            260     6 (fixed)
   709                           ;	Chosen strategy is simple_byte
   710  0042  3A00               	xorlw	0	; case 0
   711  0043  1903               	skipnz
   712  0044  28CA               	goto	l93
   713  0045  3A64               	xorlw	100	; case 100
   714  0046  1903               	skipnz
   715  0047  284C               	goto	l939
   716  0048  3A0D               	xorlw	13	; case 105
   717  0049  1903               	skipnz
   718  004A  284C               	goto	l939
   719  004B  281D               	goto	l973
   720  004C                     l939:	
   721                           
   722                           ;doprnt.c: 1253: {
   723                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   724  004C  0851               	movf	printf@ap,w
   725  004D  0084               	movwf	4
   726  004E  1383               	bcf	3,7	;select IRP bank0
   727  004F  0800               	movf	0,w
   728  0050  00D5               	movwf	printf@val
   729  0051  0A84               	incf	4,f
   730  0052  0800               	movf	0,w
   731  0053  00D6               	movwf	printf@val+1
   732  0054  3002               	movlw	2
   733  0055  00CE               	movwf	??_printf
   734  0056  084E               	movf	??_printf,w
   735  0057  07D1               	addwf	printf@ap,f
   736                           
   737                           ;doprnt.c: 1261: if((int)val < 0) {
   738  0058  1FD6               	btfss	printf@val+1,7
   739  0059  2863               	goto	l949
   740                           
   741                           ;doprnt.c: 1262: flag |= 0x03;
   742  005A  3003               	movlw	3
   743  005B  00CE               	movwf	??_printf
   744  005C  084E               	movf	??_printf,w
   745  005D  04D2               	iorwf	printf@flag,f
   746                           
   747                           ;doprnt.c: 1263: val = -val;
   748  005E  09D5               	comf	printf@val,f
   749  005F  09D6               	comf	printf@val+1,f
   750  0060  0AD5               	incf	printf@val,f
   751  0061  1903               	skipnz
   752  0062  0AD6               	incf	printf@val+1,f
   753  0063                     l949:	
   754                           
   755                           ;doprnt.c: 1264: }
   756                           ;doprnt.c: 1266: }
   757                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   758  0063  01D7               	clrf	printf@c
   759  0064  0AD7               	incf	printf@c,f
   760  0065  3005               	movlw	5
   761  0066  0657               	xorwf	printf@c,w
   762  0067  1903               	btfsc	3,2
   763  0068  2886               	goto	l961
   764  0069                     l955:	
   765                           
   766                           ;doprnt.c: 1306: if(val < dpowers[c])
   767  0069  0857               	movf	printf@c,w
   768  006A  00CE               	movwf	??_printf
   769  006B  074E               	addwf	??_printf,w
   770  006C  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   771  006D  0084               	movwf	4
   772  006E  118A  2180  118A   	fcall	stringdir
   773  0071  00CF               	movwf	??_printf+1
   774  0072  118A  2180  118A   	fcall	stringdir
   775  0075  00D0               	movwf	??_printf+2
   776  0076  0850               	movf	??_printf+2,w
   777  0077  0256               	subwf	printf@val+1,w
   778  0078  1D03               	skipz
   779  0079  287C               	goto	u805
   780  007A  084F               	movf	??_printf+1,w
   781  007B  0255               	subwf	printf@val,w
   782  007C                     u805:	
   783  007C  1C03               	btfss	3,0
   784  007D  2886               	goto	l961
   785                           
   786                           ;doprnt.c: 1307: break;
   787  007E  3001               	movlw	1
   788  007F  00CE               	movwf	??_printf
   789  0080  084E               	movf	??_printf,w
   790  0081  07D7               	addwf	printf@c,f
   791  0082  3005               	movlw	5
   792  0083  0657               	xorwf	printf@c,w
   793  0084  1D03               	btfss	3,2
   794  0085  2869               	goto	l955
   795  0086                     l961:	
   796                           
   797                           ;doprnt.c: 1422: {
   798                           ;doprnt.c: 1438: if(flag & 0x03)
   799  0086  0852               	movf	printf@flag,w
   800  0087  3903               	andlw	3
   801  0088  1903               	btfsc	3,2
   802  0089  288E               	goto	l965
   803                           
   804                           ;doprnt.c: 1439: (putch('-') );
   805  008A  302D               	movlw	45
   806  008B  118A  2334  118A   	fcall	_putch
   807  008E                     l965:	
   808                           
   809                           ;doprnt.c: 1469: }
   810                           ;doprnt.c: 1472: prec = c;
   811  008E  1283               	bcf	3,5	;RP0=0, select bank0
   812  008F  1303               	bcf	3,6	;RP1=0, select bank0
   813  0090  0857               	movf	printf@c,w
   814  0091  00CE               	movwf	??_printf
   815  0092  084E               	movf	??_printf,w
   816  0093  00D3               	movwf	printf@prec
   817  0094                     l971:	
   818                           ;doprnt.c: 1474: while(prec--) {
   819                           
   820  0094  30FF               	movlw	255
   821  0095  1283               	bcf	3,5	;RP0=0, select bank0
   822  0096  1303               	bcf	3,6	;RP1=0, select bank0
   823  0097  00CE               	movwf	??_printf
   824  0098  084E               	movf	??_printf,w
   825  0099  07D3               	addwf	printf@prec,f
   826  009A  0A53               	incf	printf@prec,w
   827  009B  1903               	btfsc	3,2
   828  009C  281D               	goto	l973
   829                           
   830                           ;doprnt.c: 1478: {
   831                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   832  009D  300A               	movlw	10
   833  009E  00C6               	movwf	___lwmod@divisor
   834  009F  3000               	movlw	0
   835  00A0  00C7               	movwf	___lwmod@divisor+1
   836  00A1  0853               	movf	printf@prec,w
   837  00A2  00CE               	movwf	??_printf
   838  00A3  074E               	addwf	??_printf,w
   839  00A4  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   840  00A5  0084               	movwf	4
   841  00A6  118A  2180  118A   	fcall	stringdir
   842  00A9  00BE               	movwf	___lwdiv@divisor
   843  00AA  118A  2180  118A   	fcall	stringdir
   844  00AD  00BF               	movwf	___lwdiv@divisor+1
   845  00AE  0856               	movf	printf@val+1,w
   846  00AF  00C1               	movwf	___lwdiv@dividend+1
   847  00B0  0855               	movf	printf@val,w
   848  00B1  00C0               	movwf	___lwdiv@dividend
   849  00B2  118A  21D4  118A   	fcall	___lwdiv
   850  00B5  1283               	bcf	3,5	;RP0=0, select bank0
   851  00B6  1303               	bcf	3,6	;RP1=0, select bank0
   852  00B7  083F               	movf	?___lwdiv+1,w
   853  00B8  00C9               	movwf	___lwmod@dividend+1
   854  00B9  083E               	movf	?___lwdiv,w
   855  00BA  00C8               	movwf	___lwmod@dividend
   856  00BB  118A  2250  118A   	fcall	___lwmod
   857  00BE  1283               	bcf	3,5	;RP0=0, select bank0
   858  00BF  1303               	bcf	3,6	;RP1=0, select bank0
   859  00C0  0846               	movf	?___lwmod,w
   860  00C1  3E30               	addlw	48
   861  00C2  00CF               	movwf	??_printf+1
   862  00C3  084F               	movf	??_printf+1,w
   863  00C4  00D7               	movwf	printf@c
   864                           
   865                           ;doprnt.c: 1523: }
   866                           ;doprnt.c: 1524: (putch(c) );
   867  00C5  0857               	movf	printf@c,w
   868  00C6  118A  2334  118A   	fcall	_putch
   869  00C9  2894               	goto	l971
   870  00CA                     l93:	
   871                           ;doprnt.c: 1540: return 0;
   872                           ;	Return value of _printf is never used
   873                           
   874                           ;doprnt.c: 1525: }
   875                           ;doprnt.c: 1533: }
   876                           ;doprnt.c: 1535: alldone:
   877                           
   878  00CA  0008               	return
   879  00CB                     __end_of_printf:	
   880                           
   881                           	psect	text2
   882  0334                     __ptext2:	
   883 ;; *************** function _putch *****************
   884 ;; Defined at:
   885 ;;		line 40 in file "UART.h"
   886 ;; Parameters:    Size  Location     Type
   887 ;;  txDato          1    wreg     unsigned char 
   888 ;; Auto vars:     Size  Location     Type
   889 ;;  txDato          1   31[BANK0 ] unsigned char 
   890 ;; Return value:  Size  Location     Type
   891 ;;                  1    wreg      void 
   892 ;; Registers used:
   893 ;;		wreg, status,2, status,0, pclath, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMMON   BANK0   BANK1
   899 ;;      Params:         0       0       0
   900 ;;      Locals:         0       1       0
   901 ;;      Temps:          0       0       0
   902 ;;      Totals:         0       1       0
   903 ;;Total ram usage:        1 bytes
   904 ;; Hardware stack levels used:    1
   905 ;; Hardware stack levels required when called:    5
   906 ;; This function calls:
   907 ;;		_UART_write
   908 ;; This function is called by:
   909 ;;		_printf
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           
   914                           ;psect for function _putch
   915  0334                     _putch:	
   916                           
   917                           ;incstack = 0
   918                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
   919                           ;putch@txDato stored from wreg
   920  0334  1283               	bcf	3,5	;RP0=0, select bank0
   921  0335  1303               	bcf	3,6	;RP1=0, select bank0
   922  0336  00BF               	movwf	putch@txDato
   923                           
   924                           ;UART.h: 42: UART_write(txDato);
   925  0337  083F               	movf	putch@txDato,w
   926  0338  118A  2320         	fcall	_UART_write
   927  033A  0008               	return
   928  033B                     __end_of_putch:	
   929                           
   930                           	psect	text3
   931  0320                     __ptext3:	
   932 ;; *************** function _UART_write *****************
   933 ;; Defined at:
   934 ;;		line 26 in file "UART.h"
   935 ;; Parameters:    Size  Location     Type
   936 ;;  dato            1    wreg     unsigned char 
   937 ;; Auto vars:     Size  Location     Type
   938 ;;  dato            1   30[BANK0 ] unsigned char 
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1
   948 ;;      Params:         0       0       0
   949 ;;      Locals:         0       1       0
   950 ;;      Temps:          0       0       0
   951 ;;      Totals:         0       1       0
   952 ;;Total ram usage:        1 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; Hardware stack levels required when called:    4
   955 ;; This function calls:
   956 ;;		Nothing
   957 ;; This function is called by:
   958 ;;		_putch
   959 ;;		_UART_printf
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           
   964                           ;psect for function _UART_write
   965  0320                     _UART_write:	
   966                           
   967                           ;incstack = 0
   968                           ; Regs used in _UART_write: [wreg]
   969                           ;UART_write@dato stored from wreg
   970  0320  1283               	bcf	3,5	;RP0=0, select bank0
   971  0321  1303               	bcf	3,6	;RP1=0, select bank0
   972  0322  00BE               	movwf	UART_write@dato
   973                           
   974                           ;UART.h: 28: TXREG = dato;
   975  0323  083E               	movf	UART_write@dato,w
   976  0324  0099               	movwf	25	;volatile
   977  0325                     l35:	
   978                           ;UART.h: 29: while(TXSTAbits.TRMT == 0);
   979                           
   980  0325  1683               	bsf	3,5	;RP0=1, select bank1
   981  0326  1303               	bcf	3,6	;RP1=0, select bank1
   982  0327  1898               	btfsc	24,1	;volatile
   983  0328  0008               	return
   984  0329  2B25               	goto	l35
   985  032A                     __end_of_UART_write:	
   986                           
   987                           	psect	text4
   988  0250                     __ptext4:	
   989 ;; *************** function ___lwmod *****************
   990 ;; Defined at:
   991 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;  divisor         2   38[BANK0 ] unsigned int 
   994 ;;  dividend        2   40[BANK0 ] unsigned int 
   995 ;; Auto vars:     Size  Location     Type
   996 ;;  counter         1   43[BANK0 ] unsigned char 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  2   38[BANK0 ] unsigned int 
   999 ;; Registers used:
  1000 ;;		wreg, status,2, status,0
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMMON   BANK0   BANK1
  1006 ;;      Params:         0       4       0
  1007 ;;      Locals:         0       1       0
  1008 ;;      Temps:          0       1       0
  1009 ;;      Totals:         0       6       0
  1010 ;;Total ram usage:        6 bytes
  1011 ;; Hardware stack levels used:    1
  1012 ;; Hardware stack levels required when called:    4
  1013 ;; This function calls:
  1014 ;;		Nothing
  1015 ;; This function is called by:
  1016 ;;		_printf
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           
  1021                           ;psect for function ___lwmod
  1022  0250                     ___lwmod:	
  1023                           
  1024                           ;incstack = 0
  1025                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1026  0250  1283               	bcf	3,5	;RP0=0, select bank0
  1027  0251  1303               	bcf	3,6	;RP1=0, select bank0
  1028  0252  0846               	movf	___lwmod@divisor,w
  1029  0253  0447               	iorwf	___lwmod@divisor+1,w
  1030  0254  1903               	btfsc	3,2
  1031  0255  2A7F               	goto	l863
  1032  0256  01CB               	clrf	___lwmod@counter
  1033  0257  0ACB               	incf	___lwmod@counter,f
  1034  0258                     l853:	
  1035  0258  1BC7               	btfsc	___lwmod@divisor+1,7
  1036  0259  2A66               	goto	l855
  1037  025A  3001               	movlw	1
  1038  025B                     u595:	
  1039  025B  1003               	clrc
  1040  025C  0DC6               	rlf	___lwmod@divisor,f
  1041  025D  0DC7               	rlf	___lwmod@divisor+1,f
  1042  025E  3EFF               	addlw	-1
  1043  025F  1D03               	skipz
  1044  0260  2A5B               	goto	u595
  1045  0261  3001               	movlw	1
  1046  0262  00CA               	movwf	??___lwmod
  1047  0263  084A               	movf	??___lwmod,w
  1048  0264  07CB               	addwf	___lwmod@counter,f
  1049  0265  2A58               	goto	l853
  1050  0266                     l855:	
  1051  0266  0847               	movf	___lwmod@divisor+1,w
  1052  0267  0249               	subwf	___lwmod@dividend+1,w
  1053  0268  1D03               	skipz
  1054  0269  2A6C               	goto	u615
  1055  026A  0846               	movf	___lwmod@divisor,w
  1056  026B  0248               	subwf	___lwmod@dividend,w
  1057  026C                     u615:	
  1058  026C  1C03               	skipc
  1059  026D  2A74               	goto	l859
  1060  026E  0846               	movf	___lwmod@divisor,w
  1061  026F  02C8               	subwf	___lwmod@dividend,f
  1062  0270  0847               	movf	___lwmod@divisor+1,w
  1063  0271  1C03               	skipc
  1064  0272  03C9               	decf	___lwmod@dividend+1,f
  1065  0273  02C9               	subwf	___lwmod@dividend+1,f
  1066  0274                     l859:	
  1067  0274  3001               	movlw	1
  1068  0275                     u625:	
  1069  0275  1003               	clrc
  1070  0276  0CC7               	rrf	___lwmod@divisor+1,f
  1071  0277  0CC6               	rrf	___lwmod@divisor,f
  1072  0278  3EFF               	addlw	-1
  1073  0279  1D03               	skipz
  1074  027A  2A75               	goto	u625
  1075  027B  3001               	movlw	1
  1076  027C  02CB               	subwf	___lwmod@counter,f
  1077  027D  1D03               	btfss	3,2
  1078  027E  2A66               	goto	l855
  1079  027F                     l863:	
  1080  027F  0849               	movf	___lwmod@dividend+1,w
  1081  0280  00C7               	movwf	?___lwmod+1
  1082  0281  0848               	movf	___lwmod@dividend,w
  1083  0282  00C6               	movwf	?___lwmod
  1084  0283  0008               	return
  1085  0284                     __end_of___lwmod:	
  1086                           
  1087                           	psect	text5
  1088  01D4                     __ptext5:	
  1089 ;; *************** function ___lwdiv *****************
  1090 ;; Defined at:
  1091 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;  divisor         2   30[BANK0 ] unsigned int 
  1094 ;;  dividend        2   32[BANK0 ] unsigned int 
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;  quotient        2   35[BANK0 ] unsigned int 
  1097 ;;  counter         1   37[BANK0 ] unsigned char 
  1098 ;; Return value:  Size  Location     Type
  1099 ;;                  2   30[BANK0 ] unsigned int 
  1100 ;; Registers used:
  1101 ;;		wreg, status,2, status,0
  1102 ;; Tracked objects:
  1103 ;;		On entry : 0/0
  1104 ;;		On exit  : 0/0
  1105 ;;		Unchanged: 0/0
  1106 ;; Data sizes:     COMMON   BANK0   BANK1
  1107 ;;      Params:         0       4       0
  1108 ;;      Locals:         0       3       0
  1109 ;;      Temps:          0       1       0
  1110 ;;      Totals:         0       8       0
  1111 ;;Total ram usage:        8 bytes
  1112 ;; Hardware stack levels used:    1
  1113 ;; Hardware stack levels required when called:    4
  1114 ;; This function calls:
  1115 ;;		Nothing
  1116 ;; This function is called by:
  1117 ;;		_printf
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           
  1122                           ;psect for function ___lwdiv
  1123  01D4                     ___lwdiv:	
  1124                           
  1125                           ;incstack = 0
  1126                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1127  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1128  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  1129  01D6  01C3               	clrf	___lwdiv@quotient
  1130  01D7  01C4               	clrf	___lwdiv@quotient+1
  1131  01D8  083E               	movf	___lwdiv@divisor,w
  1132  01D9  043F               	iorwf	___lwdiv@divisor+1,w
  1133  01DA  1903               	btfsc	3,2
  1134  01DB  2A0D               	goto	l841
  1135  01DC  01C5               	clrf	___lwdiv@counter
  1136  01DD  0AC5               	incf	___lwdiv@counter,f
  1137  01DE                     l829:	
  1138  01DE  1BBF               	btfsc	___lwdiv@divisor+1,7
  1139  01DF  29EC               	goto	l831
  1140  01E0  3001               	movlw	1
  1141  01E1                     u525:	
  1142  01E1  1003               	clrc
  1143  01E2  0DBE               	rlf	___lwdiv@divisor,f
  1144  01E3  0DBF               	rlf	___lwdiv@divisor+1,f
  1145  01E4  3EFF               	addlw	-1
  1146  01E5  1D03               	skipz
  1147  01E6  29E1               	goto	u525
  1148  01E7  3001               	movlw	1
  1149  01E8  00C2               	movwf	??___lwdiv
  1150  01E9  0842               	movf	??___lwdiv,w
  1151  01EA  07C5               	addwf	___lwdiv@counter,f
  1152  01EB  29DE               	goto	l829
  1153  01EC                     l831:	
  1154  01EC  3001               	movlw	1
  1155  01ED                     u545:	
  1156  01ED  1003               	clrc
  1157  01EE  0DC3               	rlf	___lwdiv@quotient,f
  1158  01EF  0DC4               	rlf	___lwdiv@quotient+1,f
  1159  01F0  3EFF               	addlw	-1
  1160  01F1  1D03               	skipz
  1161  01F2  29ED               	goto	u545
  1162  01F3  083F               	movf	___lwdiv@divisor+1,w
  1163  01F4  0241               	subwf	___lwdiv@dividend+1,w
  1164  01F5  1D03               	skipz
  1165  01F6  29F9               	goto	u555
  1166  01F7  083E               	movf	___lwdiv@divisor,w
  1167  01F8  0240               	subwf	___lwdiv@dividend,w
  1168  01F9                     u555:	
  1169  01F9  1C03               	skipc
  1170  01FA  2A02               	goto	l837
  1171  01FB  083E               	movf	___lwdiv@divisor,w
  1172  01FC  02C0               	subwf	___lwdiv@dividend,f
  1173  01FD  083F               	movf	___lwdiv@divisor+1,w
  1174  01FE  1C03               	skipc
  1175  01FF  03C1               	decf	___lwdiv@dividend+1,f
  1176  0200  02C1               	subwf	___lwdiv@dividend+1,f
  1177  0201  1443               	bsf	___lwdiv@quotient,0
  1178  0202                     l837:	
  1179  0202  3001               	movlw	1
  1180  0203                     u565:	
  1181  0203  1003               	clrc
  1182  0204  0CBF               	rrf	___lwdiv@divisor+1,f
  1183  0205  0CBE               	rrf	___lwdiv@divisor,f
  1184  0206  3EFF               	addlw	-1
  1185  0207  1D03               	skipz
  1186  0208  2A03               	goto	u565
  1187  0209  3001               	movlw	1
  1188  020A  02C5               	subwf	___lwdiv@counter,f
  1189  020B  1D03               	btfss	3,2
  1190  020C  29EC               	goto	l831
  1191  020D                     l841:	
  1192  020D  0844               	movf	___lwdiv@quotient+1,w
  1193  020E  00BF               	movwf	?___lwdiv+1
  1194  020F  0843               	movf	___lwdiv@quotient,w
  1195  0210  00BE               	movwf	?___lwdiv
  1196  0211  0008               	return
  1197  0212                     __end_of___lwdiv:	
  1198                           
  1199                           	psect	text6
  1200  030D                     __ptext6:	
  1201 ;; *************** function _UART_init *****************
  1202 ;; Defined at:
  1203 ;;		line 4 in file "UART.h"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1
  1217 ;;      Params:         0       0       0
  1218 ;;      Locals:         0       0       0
  1219 ;;      Temps:          0       0       0
  1220 ;;      Totals:         0       0       0
  1221 ;;Total ram usage:        0 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    4
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           
  1232                           ;psect for function _UART_init
  1233  030D                     _UART_init:	
  1234                           
  1235                           ;UART.h: 6: TRISCbits.TRISC7 = 1;
  1236                           
  1237                           ;incstack = 0
  1238                           ; Regs used in _UART_init: [wreg]
  1239  030D  1683               	bsf	3,5	;RP0=1, select bank1
  1240  030E  1303               	bcf	3,6	;RP1=0, select bank1
  1241  030F  1787               	bsf	7,7	;volatile
  1242                           
  1243                           ;UART.h: 7: TRISCbits.TRISC6 = 0;
  1244  0310  1307               	bcf	7,6	;volatile
  1245                           
  1246                           ;UART.h: 9: TXSTAbits.SYNC = 0;
  1247  0311  1218               	bcf	24,4	;volatile
  1248                           
  1249                           ;UART.h: 10: TXSTAbits.TX9 = 0;
  1250  0312  1318               	bcf	24,6	;volatile
  1251                           
  1252                           ;UART.h: 11: TXSTAbits.BRGH = 1;
  1253  0313  1518               	bsf	24,2	;volatile
  1254                           
  1255                           ;UART.h: 12: SPBRG = 129;
  1256  0314  3081               	movlw	129
  1257  0315  0099               	movwf	25	;volatile
  1258                           
  1259                           ;UART.h: 13: RCSTAbits.SPEN = 1;
  1260  0316  1283               	bcf	3,5	;RP0=0, select bank0
  1261  0317  1303               	bcf	3,6	;RP1=0, select bank0
  1262  0318  1798               	bsf	24,7	;volatile
  1263                           
  1264                           ;UART.h: 14: TXSTAbits.TXEN = 1;
  1265  0319  1683               	bsf	3,5	;RP0=1, select bank1
  1266  031A  1303               	bcf	3,6	;RP1=0, select bank1
  1267  031B  1698               	bsf	24,5	;volatile
  1268                           
  1269                           ;UART.h: 15: RCSTAbits.CREN = 1;
  1270  031C  1283               	bcf	3,5	;RP0=0, select bank0
  1271  031D  1303               	bcf	3,6	;RP1=0, select bank0
  1272  031E  1618               	bsf	24,4	;volatile
  1273  031F  0008               	return
  1274  0320                     __end_of_UART_init:	
  1275                           
  1276                           	psect	text7
  1277  02E7                     __ptext7:	
  1278 ;; *************** function _Interrupcion *****************
  1279 ;; Defined at:
  1280 ;;		line 24 in file "main.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;		None
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;  dataRX          1   29[BANK0 ] unsigned char 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      void 
  1287 ;; Registers used:
  1288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMMON   BANK0   BANK1
  1294 ;;      Params:         0       0       0
  1295 ;;      Locals:         0       1       0
  1296 ;;      Temps:          0       5       0
  1297 ;;      Totals:         0       6       0
  1298 ;;Total ram usage:        6 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; Hardware stack levels required when called:    3
  1301 ;; This function calls:
  1302 ;;		i1_UART_write
  1303 ;;		i1_printf
  1304 ;; This function is called by:
  1305 ;;		Interrupt level 1
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           
  1310                           ;psect for function _Interrupcion
  1311  02E7                     _Interrupcion:	
  1312                           
  1313                           ;main.c: 27: if(INTCONbits.INTF == 1){
  1314  02E7  1C8B               	btfss	11,1	;volatile
  1315  02E8  2AEF               	goto	i1l52
  1316                           
  1317                           ;main.c: 28: printf("Interupcion en RB0 \n\r");
  1318  02E9  3027               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1319  02EA  118A  20CB  118A   	fcall	i1_printf
  1320                           
  1321                           ;main.c: 29: INTCONbits.INTF = 0;
  1322  02ED  108B               	bcf	11,1	;volatile
  1323                           
  1324                           ;main.c: 30: }else if(PIR1bits.RCIF == 1){
  1325  02EE  2B00               	goto	i1l55
  1326  02EF                     i1l52:	
  1327  02EF  1E8C               	btfss	12,5	;volatile
  1328  02F0  2B00               	goto	i1l55
  1329                           
  1330                           ;main.c: 32: char dataRX = RCREG;
  1331  02F1  081A               	movf	26,w	;volatile
  1332  02F2  00B8               	movwf	??_Interrupcion
  1333  02F3  0838               	movf	??_Interrupcion,w
  1334  02F4  00BD               	movwf	Interrupcion@dataRX
  1335                           
  1336                           ;main.c: 33: UART_write(dataRX);
  1337  02F5  083D               	movf	Interrupcion@dataRX,w
  1338  02F6  118A  232A  118A   	fcall	i1_UART_write
  1339                           
  1340                           ;main.c: 34: printf(" Interupcion en RX USART \n\r");
  1341  02F9  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1342  02FA  118A  20CB  118A   	fcall	i1_printf
  1343                           
  1344                           ;main.c: 35: PIR1bits.RCIF = 0;
  1345  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  1346  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  1347  02FF  128C               	bcf	12,5	;volatile
  1348  0300                     i1l55:	
  1349  0300  1283               	bcf	3,5	;RP0=0, select bank0
  1350  0301  1303               	bcf	3,6	;RP1=0, select bank0
  1351  0302  083C               	movf	??_Interrupcion+4,w
  1352  0303  00FF               	movwf	127
  1353  0304  083B               	movf	??_Interrupcion+3,w
  1354  0305  008A               	movwf	10
  1355  0306  083A               	movf	??_Interrupcion+2,w
  1356  0307  0084               	movwf	4
  1357  0308  0E39               	swapf	(??_Interrupcion+1)^0,w
  1358  0309  0083               	movwf	3
  1359  030A  0EFE               	swapf	126,f
  1360  030B  0E7E               	swapf	126,w
  1361  030C  0009               	retfie
  1362  030D                     __end_of_Interrupcion:	
  1363                           
  1364                           	psect	intentry
  1365  0004                     __pintentry:	
  1366                           ;incstack = 0
  1367                           ; Regs used in _Interrupcion: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1368                           
  1369  0004                     interrupt_function:	
  1370  007E                     saved_w	set	btemp
  1371  0004  00FE               	movwf	btemp
  1372  0005  0E03               	swapf	3,w
  1373  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1374  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1375  0008  00B9               	movwf	??_Interrupcion+1
  1376  0009  0804               	movf	4,w
  1377  000A  00BA               	movwf	??_Interrupcion+2
  1378  000B  080A               	movf	10,w
  1379  000C  00BB               	movwf	??_Interrupcion+3
  1380  000D  087F               	movf	btemp+1,w
  1381  000E  00BC               	movwf	??_Interrupcion+4
  1382  000F  118A  2AE7         	ljmp	_Interrupcion
  1383                           
  1384                           	psect	text8
  1385  00CB                     __ptext8:	
  1386 ;; *************** function i1_printf *****************
  1387 ;; Defined at:
  1388 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;  f               1    wreg     PTR const unsigned char 
  1391 ;;		 -> STR_3(18), STR_2(28), STR_1(22), 
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;  f               1   17[BANK0 ] PTR const unsigned char 
  1394 ;;		 -> STR_3(18), STR_2(28), STR_1(22), 
  1395 ;;  printf          4    0        struct .
  1396 ;;  printf          2   21[BANK0 ] unsigned int 
  1397 ;;  printf          2    0        PTR const unsigned char 
  1398 ;;  printf          2    0        unsigned int 
  1399 ;;  printf          1   23[BANK0 ] char 
  1400 ;;  printf          1   20[BANK0 ] char 
  1401 ;;  printf          1   19[BANK0 ] unsigned char 
  1402 ;;  printf          1   18[BANK0 ] PTR void [1]
  1403 ;;		 -> ?i1_printf(2), ?_printf(2), 
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  2    0[None  ] int 
  1406 ;; Registers used:
  1407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMMON   BANK0   BANK1
  1413 ;;      Params:         0       0       0
  1414 ;;      Locals:         0       7       0
  1415 ;;      Temps:          0       3       0
  1416 ;;      Totals:         0      10       0
  1417 ;;Total ram usage:       10 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:    2
  1420 ;; This function calls:
  1421 ;;		i1___lwdiv
  1422 ;;		i1___lwmod
  1423 ;;		i1_putch
  1424 ;; This function is called by:
  1425 ;;		_Interrupcion
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           
  1430                           ;psect for function i1_printf
  1431  00CB                     i1_printf:	
  1432                           
  1433                           ;incstack = 0
  1434                           ; Regs used in i1_printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1435                           ;i1printf@f stored from wreg
  1436  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1437  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1438  00CD  00B1               	movwf	i1printf@f
  1439                           
  1440                           ;doprnt.c: 466: va_list ap;
  1441                           ;doprnt.c: 499: signed char c;
  1442                           ;doprnt.c: 506: signed char prec;
  1443                           ;doprnt.c: 508: unsigned char flag;
  1444                           ;doprnt.c: 523: union {
  1445                           ;doprnt.c: 524: unsigned long vd;
  1446                           ;doprnt.c: 525: double integ;
  1447                           ;doprnt.c: 526: } tmpval;
  1448                           ;doprnt.c: 528: unsigned int val;
  1449                           ;doprnt.c: 529: unsigned len;
  1450                           ;doprnt.c: 530: const char * cp;
  1451                           ;doprnt.c: 533: *ap = __va_start();
  1452  00CE  3020               	movlw	(low (?i1_printf| 0))& (0+255)
  1453  00CF  00AE               	movwf	??i1_printf
  1454  00D0  082E               	movf	??i1_printf,w
  1455  00D1  00B2               	movwf	i1printf@ap
  1456  00D2                     i1l1021:	
  1457                           ;doprnt.c: 536: while(c = *f++) {
  1458                           
  1459  00D2  3001               	movlw	1
  1460  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1461  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  1462  00D5  07B1               	addwf	i1printf@f,f
  1463  00D6  30FF               	movlw	-1
  1464  00D7  0731               	addwf	i1printf@f,w
  1465  00D8  0084               	movwf	4
  1466  00D9  118A  2180  118A   	fcall	stringdir
  1467  00DC  00AE               	movwf	??i1_printf
  1468  00DD  082E               	movf	??i1_printf,w
  1469  00DE  00B7               	movwf	i1printf@c
  1470  00DF  0837               	movf	i1printf@c,w
  1471  00E0  1903               	btfsc	3,2
  1472  00E1  0008               	return
  1473                           
  1474                           ;doprnt.c: 538: if(c != '%')
  1475  00E2  3025               	movlw	37
  1476  00E3  0637               	xorwf	i1printf@c,w
  1477  00E4  1903               	btfsc	3,2
  1478  00E5  28EB               	goto	i1l981
  1479                           
  1480                           ;doprnt.c: 540: {
  1481                           ;doprnt.c: 541: (putch(c) );
  1482  00E6  0837               	movf	i1printf@c,w
  1483  00E7  118A  233B  118A   	fcall	i1_putch
  1484                           
  1485                           ;doprnt.c: 542: continue;
  1486  00EA  28D2               	goto	i1l1021
  1487  00EB                     i1l981:	
  1488                           
  1489                           ;doprnt.c: 543: }
  1490                           ;doprnt.c: 548: flag = 0;
  1491  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1492  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  1493  00ED  01B3               	clrf	i1printf@flag
  1494                           
  1495                           ;doprnt.c: 822: }
  1496                           
  1497                           ;doprnt.c: 813: continue;
  1498                           
  1499                           ;doprnt.c: 802: default:
  1500                           
  1501                           ;doprnt.c: 698: case 'i':
  1502                           ;doprnt.c: 699: break;
  1503                           
  1504                           ;doprnt.c: 697: case 'd':
  1505                           
  1506                           ;doprnt.c: 638: goto alldone;
  1507                           
  1508                           ;doprnt.c: 637: case 0:
  1509                           
  1510                           ;doprnt.c: 635: switch(c = *f++) {
  1511  00EE  3001               	movlw	1
  1512  00EF  07B1               	addwf	i1printf@f,f
  1513  00F0  30FF               	movlw	-1
  1514  00F1  0731               	addwf	i1printf@f,w
  1515  00F2  0084               	movwf	4
  1516  00F3  118A  2180  118A   	fcall	stringdir
  1517  00F6  00B7               	movwf	i1printf@c
  1518                           
  1519                           ; Switch size 1, requested type "space"
  1520                           ; Number of cases is 3, Range of values is 0 to 105
  1521                           ; switch strategies available:
  1522                           ; Name         Instructions Cycles
  1523                           ; simple_byte           10     6 (average)
  1524                           ; direct_byte          219     7 (fixed)
  1525                           ; jumptable            260     6 (fixed)
  1526                           ;	Chosen strategy is simple_byte
  1527  00F7  3A00               	xorlw	0	; case 0
  1528  00F8  1903               	skipnz
  1529  00F9  297F               	goto	i1l93
  1530  00FA  3A64               	xorlw	100	; case 100
  1531  00FB  1903               	skipnz
  1532  00FC  2901               	goto	i1l987
  1533  00FD  3A0D               	xorlw	13	; case 105
  1534  00FE  1903               	skipnz
  1535  00FF  2901               	goto	i1l987
  1536  0100  28D2               	goto	i1l1021
  1537  0101                     i1l987:	
  1538                           
  1539                           ;doprnt.c: 1253: {
  1540                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1541  0101  0832               	movf	i1printf@ap,w
  1542  0102  0084               	movwf	4
  1543  0103  1383               	bcf	3,7	;select IRP bank0
  1544  0104  0800               	movf	0,w
  1545  0105  00B5               	movwf	i1printf@val
  1546  0106  0A84               	incf	4,f
  1547  0107  0800               	movf	0,w
  1548  0108  00B6               	movwf	i1printf@val+1
  1549  0109  3002               	movlw	2
  1550  010A  00AE               	movwf	??i1_printf
  1551  010B  082E               	movf	??i1_printf,w
  1552  010C  07B2               	addwf	i1printf@ap,f
  1553                           
  1554                           ;doprnt.c: 1261: if((int)val < 0) {
  1555  010D  1FB6               	btfss	i1printf@val+1,7
  1556  010E  2918               	goto	i1l997
  1557                           
  1558                           ;doprnt.c: 1262: flag |= 0x03;
  1559  010F  3003               	movlw	3
  1560  0110  00AE               	movwf	??i1_printf
  1561  0111  082E               	movf	??i1_printf,w
  1562  0112  04B3               	iorwf	i1printf@flag,f
  1563                           
  1564                           ;doprnt.c: 1263: val = -val;
  1565  0113  09B5               	comf	i1printf@val,f
  1566  0114  09B6               	comf	i1printf@val+1,f
  1567  0115  0AB5               	incf	i1printf@val,f
  1568  0116  1903               	skipnz
  1569  0117  0AB6               	incf	i1printf@val+1,f
  1570  0118                     i1l997:	
  1571                           
  1572                           ;doprnt.c: 1264: }
  1573                           ;doprnt.c: 1266: }
  1574                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1575  0118  01B7               	clrf	i1printf@c
  1576  0119  0AB7               	incf	i1printf@c,f
  1577  011A  3005               	movlw	5
  1578  011B  0637               	xorwf	i1printf@c,w
  1579  011C  1903               	btfsc	3,2
  1580  011D  293B               	goto	i1l1009
  1581  011E                     i1l1003:	
  1582                           
  1583                           ;doprnt.c: 1306: if(val < dpowers[c])
  1584  011E  0837               	movf	i1printf@c,w
  1585  011F  00AE               	movwf	??i1_printf
  1586  0120  072E               	addwf	??i1_printf,w
  1587  0121  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1588  0122  0084               	movwf	4
  1589  0123  118A  2180  118A   	fcall	stringdir
  1590  0126  00AF               	movwf	??i1_printf+1
  1591  0127  118A  2180  118A   	fcall	stringdir
  1592  012A  00B0               	movwf	??i1_printf+2
  1593  012B  0830               	movf	??i1_printf+2,w
  1594  012C  0236               	subwf	i1printf@val+1,w
  1595  012D  1D03               	skipz
  1596  012E  2931               	goto	u88_25
  1597  012F  082F               	movf	??i1_printf+1,w
  1598  0130  0235               	subwf	i1printf@val,w
  1599  0131                     u88_25:	
  1600  0131  1C03               	btfss	3,0
  1601  0132  293B               	goto	i1l1009
  1602                           
  1603                           ;doprnt.c: 1307: break;
  1604  0133  3001               	movlw	1
  1605  0134  00AE               	movwf	??i1_printf
  1606  0135  082E               	movf	??i1_printf,w
  1607  0136  07B7               	addwf	i1printf@c,f
  1608  0137  3005               	movlw	5
  1609  0138  0637               	xorwf	i1printf@c,w
  1610  0139  1D03               	btfss	3,2
  1611  013A  291E               	goto	i1l1003
  1612  013B                     i1l1009:	
  1613                           
  1614                           ;doprnt.c: 1422: {
  1615                           ;doprnt.c: 1438: if(flag & 0x03)
  1616  013B  0833               	movf	i1printf@flag,w
  1617  013C  3903               	andlw	3
  1618  013D  1903               	btfsc	3,2
  1619  013E  2943               	goto	i1l1013
  1620                           
  1621                           ;doprnt.c: 1439: (putch('-') );
  1622  013F  302D               	movlw	45
  1623  0140  118A  233B  118A   	fcall	i1_putch
  1624  0143                     i1l1013:	
  1625                           
  1626                           ;doprnt.c: 1469: }
  1627                           ;doprnt.c: 1472: prec = c;
  1628  0143  1283               	bcf	3,5	;RP0=0, select bank0
  1629  0144  1303               	bcf	3,6	;RP1=0, select bank0
  1630  0145  0837               	movf	i1printf@c,w
  1631  0146  00AE               	movwf	??i1_printf
  1632  0147  082E               	movf	??i1_printf,w
  1633  0148  00B4               	movwf	i1printf@prec
  1634  0149                     i1l1019:	
  1635                           ;doprnt.c: 1474: while(prec--) {
  1636                           
  1637  0149  30FF               	movlw	255
  1638  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1639  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1640  014C  00AE               	movwf	??i1_printf
  1641  014D  082E               	movf	??i1_printf,w
  1642  014E  07B4               	addwf	i1printf@prec,f
  1643  014F  0A34               	incf	i1printf@prec,w
  1644  0150  1903               	btfsc	3,2
  1645  0151  28D2               	goto	i1l1021
  1646                           
  1647                           ;doprnt.c: 1478: {
  1648                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1649  0152  300A               	movlw	10
  1650  0153  00A8               	movwf	i1___lwmod@divisor
  1651  0154  3000               	movlw	0
  1652  0155  00A9               	movwf	i1___lwmod@divisor+1
  1653  0156  0834               	movf	i1printf@prec,w
  1654  0157  00AE               	movwf	??i1_printf
  1655  0158  072E               	addwf	??i1_printf,w
  1656  0159  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1657  015A  0084               	movwf	4
  1658  015B  118A  2180  118A   	fcall	stringdir
  1659  015E  00A0               	movwf	i1___lwdiv@divisor
  1660  015F  118A  2180  118A   	fcall	stringdir
  1661  0162  00A1               	movwf	i1___lwdiv@divisor+1
  1662  0163  0836               	movf	i1printf@val+1,w
  1663  0164  00A3               	movwf	i1___lwdiv@dividend+1
  1664  0165  0835               	movf	i1printf@val,w
  1665  0166  00A2               	movwf	i1___lwdiv@dividend
  1666  0167  118A  2212  118A   	fcall	i1___lwdiv
  1667  016A  1283               	bcf	3,5	;RP0=0, select bank0
  1668  016B  1303               	bcf	3,6	;RP1=0, select bank0
  1669  016C  0821               	movf	?i1___lwdiv+1,w
  1670  016D  00AB               	movwf	i1___lwmod@dividend+1
  1671  016E  0820               	movf	?i1___lwdiv,w
  1672  016F  00AA               	movwf	i1___lwmod@dividend
  1673  0170  118A  2284  118A   	fcall	i1___lwmod
  1674  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1675  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1676  0175  0828               	movf	?i1___lwmod,w
  1677  0176  3E30               	addlw	48
  1678  0177  00AF               	movwf	??i1_printf+1
  1679  0178  082F               	movf	??i1_printf+1,w
  1680  0179  00B7               	movwf	i1printf@c
  1681                           
  1682                           ;doprnt.c: 1523: }
  1683                           ;doprnt.c: 1524: (putch(c) );
  1684  017A  0837               	movf	i1printf@c,w
  1685  017B  118A  233B  118A   	fcall	i1_putch
  1686  017E  2949               	goto	i1l1019
  1687  017F                     i1l93:	
  1688                           ;doprnt.c: 1540: return 0;
  1689                           ;	Return value of i1_printf is never used
  1690                           
  1691                           ;doprnt.c: 1525: }
  1692                           ;doprnt.c: 1533: }
  1693                           ;doprnt.c: 1535: alldone:
  1694                           
  1695  017F  0008               	return
  1696  0180                     __end_ofi1_printf:	
  1697                           
  1698                           	psect	text9
  1699  033B                     __ptext9:	
  1700 ;; *************** function i1_putch *****************
  1701 ;; Defined at:
  1702 ;;		line 40 in file "UART.h"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  txDato          1    wreg     unsigned char 
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;  txDato          1    1[BANK0 ] unsigned char 
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		wreg, status,2, status,0, pclath, cstack
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMMON   BANK0   BANK1
  1716 ;;      Params:         0       0       0
  1717 ;;      Locals:         0       1       0
  1718 ;;      Temps:          0       0       0
  1719 ;;      Totals:         0       1       0
  1720 ;;Total ram usage:        1 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    1
  1723 ;; This function calls:
  1724 ;;		i1_UART_write
  1725 ;; This function is called by:
  1726 ;;		i1_printf
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           
  1731                           ;psect for function i1_putch
  1732  033B                     i1_putch:	
  1733                           
  1734                           ;incstack = 0
  1735                           ; Regs used in i1_putch: [wreg+status,2+status,0+pclath+cstack]
  1736                           ;i1putch@txDato stored from wreg
  1737  033B  1283               	bcf	3,5	;RP0=0, select bank0
  1738  033C  1303               	bcf	3,6	;RP1=0, select bank0
  1739  033D  00A1               	movwf	i1putch@txDato
  1740                           
  1741                           ;UART.h: 42: UART_write(txDato);
  1742  033E  0821               	movf	i1putch@txDato,w
  1743  033F  118A  232A         	fcall	i1_UART_write
  1744  0341  0008               	return
  1745  0342                     __end_ofi1_putch:	
  1746                           
  1747                           	psect	text10
  1748  032A                     __ptext10:	
  1749 ;; *************** function i1_UART_write *****************
  1750 ;; Defined at:
  1751 ;;		line 26 in file "UART.h"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;  dato            1    wreg     unsigned char 
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;  dato            1    0[BANK0 ] unsigned char 
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		wreg
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMMON   BANK0   BANK1
  1765 ;;      Params:         0       0       0
  1766 ;;      Locals:         0       1       0
  1767 ;;      Temps:          0       0       0
  1768 ;;      Totals:         0       1       0
  1769 ;;Total ram usage:        1 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; This function calls:
  1772 ;;		Nothing
  1773 ;; This function is called by:
  1774 ;;		_Interrupcion
  1775 ;;		i1_putch
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           
  1780                           ;psect for function i1_UART_write
  1781  032A                     i1_UART_write:	
  1782                           
  1783                           ;incstack = 0
  1784                           ; Regs used in i1_UART_write: [wreg]
  1785                           ;i1UART_write@dato stored from wreg
  1786  032A  1283               	bcf	3,5	;RP0=0, select bank0
  1787  032B  1303               	bcf	3,6	;RP1=0, select bank0
  1788  032C  00A0               	movwf	i1UART_write@dato
  1789                           
  1790                           ;UART.h: 28: TXREG = dato;
  1791  032D  0820               	movf	i1UART_write@dato,w
  1792  032E  0099               	movwf	25	;volatile
  1793  032F                     i1l35:	
  1794                           ;UART.h: 29: while(TXSTAbits.TRMT == 0);
  1795                           
  1796  032F  1683               	bsf	3,5	;RP0=1, select bank1
  1797  0330  1303               	bcf	3,6	;RP1=0, select bank1
  1798  0331  1898               	btfsc	24,1	;volatile
  1799  0332  0008               	return
  1800  0333  2B2F               	goto	i1l35
  1801  0334                     __end_ofi1_UART_write:	
  1802                           
  1803                           	psect	text11
  1804  0284                     __ptext11:	
  1805 ;; *************** function i1___lwmod *****************
  1806 ;; Defined at:
  1807 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;  divisor         2    8[BANK0 ] unsigned int 
  1810 ;;  dividend        2   10[BANK0 ] unsigned int 
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;  __lwmod         1   13[BANK0 ] unsigned char 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  2    8[BANK0 ] unsigned int 
  1815 ;; Registers used:
  1816 ;;		wreg, status,2, status,0
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMMON   BANK0   BANK1
  1822 ;;      Params:         0       4       0
  1823 ;;      Locals:         0       1       0
  1824 ;;      Temps:          0       1       0
  1825 ;;      Totals:         0       6       0
  1826 ;;Total ram usage:        6 bytes
  1827 ;; Hardware stack levels used:    1
  1828 ;; This function calls:
  1829 ;;		Nothing
  1830 ;; This function is called by:
  1831 ;;		i1_printf
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           
  1836                           ;psect for function i1___lwmod
  1837  0284                     i1___lwmod:	
  1838                           
  1839                           ;incstack = 0
  1840                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  1841  0284  1283               	bcf	3,5	;RP0=0, select bank0
  1842  0285  1303               	bcf	3,6	;RP1=0, select bank0
  1843  0286  0828               	movf	i1___lwmod@divisor,w
  1844  0287  0429               	iorwf	i1___lwmod@divisor+1,w
  1845  0288  1903               	btfsc	3,2
  1846  0289  2AB3               	goto	i1l913
  1847  028A  01AD               	clrf	i1___lwmod@counter
  1848  028B  0AAD               	incf	i1___lwmod@counter,f
  1849  028C                     i1l903:	
  1850  028C  1BA9               	btfsc	i1___lwmod@divisor+1,7
  1851  028D  2A9A               	goto	i1l905
  1852  028E  3001               	movlw	1
  1853  028F                     u72_25:	
  1854  028F  1003               	clrc
  1855  0290  0DA8               	rlf	i1___lwmod@divisor,f
  1856  0291  0DA9               	rlf	i1___lwmod@divisor+1,f
  1857  0292  3EFF               	addlw	-1
  1858  0293  1D03               	skipz
  1859  0294  2A8F               	goto	u72_25
  1860  0295  3001               	movlw	1
  1861  0296  00AC               	movwf	??i1___lwmod
  1862  0297  082C               	movf	??i1___lwmod,w
  1863  0298  07AD               	addwf	i1___lwmod@counter,f
  1864  0299  2A8C               	goto	i1l903
  1865  029A                     i1l905:	
  1866  029A  0829               	movf	i1___lwmod@divisor+1,w
  1867  029B  022B               	subwf	i1___lwmod@dividend+1,w
  1868  029C  1D03               	skipz
  1869  029D  2AA0               	goto	u74_25
  1870  029E  0828               	movf	i1___lwmod@divisor,w
  1871  029F  022A               	subwf	i1___lwmod@dividend,w
  1872  02A0                     u74_25:	
  1873  02A0  1C03               	skipc
  1874  02A1  2AA8               	goto	i1l909
  1875  02A2  0828               	movf	i1___lwmod@divisor,w
  1876  02A3  02AA               	subwf	i1___lwmod@dividend,f
  1877  02A4  0829               	movf	i1___lwmod@divisor+1,w
  1878  02A5  1C03               	skipc
  1879  02A6  03AB               	decf	i1___lwmod@dividend+1,f
  1880  02A7  02AB               	subwf	i1___lwmod@dividend+1,f
  1881  02A8                     i1l909:	
  1882  02A8  3001               	movlw	1
  1883  02A9                     u75_25:	
  1884  02A9  1003               	clrc
  1885  02AA  0CA9               	rrf	i1___lwmod@divisor+1,f
  1886  02AB  0CA8               	rrf	i1___lwmod@divisor,f
  1887  02AC  3EFF               	addlw	-1
  1888  02AD  1D03               	skipz
  1889  02AE  2AA9               	goto	u75_25
  1890  02AF  3001               	movlw	1
  1891  02B0  02AD               	subwf	i1___lwmod@counter,f
  1892  02B1  1D03               	btfss	3,2
  1893  02B2  2A9A               	goto	i1l905
  1894  02B3                     i1l913:	
  1895  02B3  082B               	movf	i1___lwmod@dividend+1,w
  1896  02B4  00A9               	movwf	?i1___lwmod+1
  1897  02B5  082A               	movf	i1___lwmod@dividend,w
  1898  02B6  00A8               	movwf	?i1___lwmod
  1899  02B7  0008               	return
  1900  02B8                     __end_ofi1___lwmod:	
  1901                           
  1902                           	psect	text12
  1903  0212                     __ptext12:	
  1904 ;; *************** function i1___lwdiv *****************
  1905 ;; Defined at:
  1906 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  divisor         2    0[BANK0 ] unsigned int 
  1909 ;;  dividend        2    2[BANK0 ] unsigned int 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  __lwdiv         2    5[BANK0 ] unsigned int 
  1912 ;;  __lwdiv         1    7[BANK0 ] unsigned char 
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  2    0[BANK0 ] unsigned int 
  1915 ;; Registers used:
  1916 ;;		wreg, status,2, status,0
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMMON   BANK0   BANK1
  1922 ;;      Params:         0       4       0
  1923 ;;      Locals:         0       3       0
  1924 ;;      Temps:          0       1       0
  1925 ;;      Totals:         0       8       0
  1926 ;;Total ram usage:        8 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; This function calls:
  1929 ;;		Nothing
  1930 ;; This function is called by:
  1931 ;;		i1_printf
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           
  1936                           ;psect for function i1___lwdiv
  1937  0212                     i1___lwdiv:	
  1938                           
  1939                           ;incstack = 0
  1940                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  1941  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1942  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1943  0214  01A5               	clrf	i1___lwdiv@quotient
  1944  0215  01A6               	clrf	i1___lwdiv@quotient+1
  1945  0216  0820               	movf	i1___lwdiv@divisor,w
  1946  0217  0421               	iorwf	i1___lwdiv@divisor+1,w
  1947  0218  1903               	btfsc	3,2
  1948  0219  2A4B               	goto	i1l891
  1949  021A  01A7               	clrf	i1___lwdiv@counter
  1950  021B  0AA7               	incf	i1___lwdiv@counter,f
  1951  021C                     i1l879:	
  1952  021C  1BA1               	btfsc	i1___lwdiv@divisor+1,7
  1953  021D  2A2A               	goto	i1l881
  1954  021E  3001               	movlw	1
  1955  021F                     u65_25:	
  1956  021F  1003               	clrc
  1957  0220  0DA0               	rlf	i1___lwdiv@divisor,f
  1958  0221  0DA1               	rlf	i1___lwdiv@divisor+1,f
  1959  0222  3EFF               	addlw	-1
  1960  0223  1D03               	skipz
  1961  0224  2A1F               	goto	u65_25
  1962  0225  3001               	movlw	1
  1963  0226  00A4               	movwf	??i1___lwdiv
  1964  0227  0824               	movf	??i1___lwdiv,w
  1965  0228  07A7               	addwf	i1___lwdiv@counter,f
  1966  0229  2A1C               	goto	i1l879
  1967  022A                     i1l881:	
  1968  022A  3001               	movlw	1
  1969  022B                     u67_25:	
  1970  022B  1003               	clrc
  1971  022C  0DA5               	rlf	i1___lwdiv@quotient,f
  1972  022D  0DA6               	rlf	i1___lwdiv@quotient+1,f
  1973  022E  3EFF               	addlw	-1
  1974  022F  1D03               	skipz
  1975  0230  2A2B               	goto	u67_25
  1976  0231  0821               	movf	i1___lwdiv@divisor+1,w
  1977  0232  0223               	subwf	i1___lwdiv@dividend+1,w
  1978  0233  1D03               	skipz
  1979  0234  2A37               	goto	u68_25
  1980  0235  0820               	movf	i1___lwdiv@divisor,w
  1981  0236  0222               	subwf	i1___lwdiv@dividend,w
  1982  0237                     u68_25:	
  1983  0237  1C03               	skipc
  1984  0238  2A40               	goto	i1l887
  1985  0239  0820               	movf	i1___lwdiv@divisor,w
  1986  023A  02A2               	subwf	i1___lwdiv@dividend,f
  1987  023B  0821               	movf	i1___lwdiv@divisor+1,w
  1988  023C  1C03               	skipc
  1989  023D  03A3               	decf	i1___lwdiv@dividend+1,f
  1990  023E  02A3               	subwf	i1___lwdiv@dividend+1,f
  1991  023F  1425               	bsf	i1___lwdiv@quotient,0
  1992  0240                     i1l887:	
  1993  0240  3001               	movlw	1
  1994  0241                     u69_25:	
  1995  0241  1003               	clrc
  1996  0242  0CA1               	rrf	i1___lwdiv@divisor+1,f
  1997  0243  0CA0               	rrf	i1___lwdiv@divisor,f
  1998  0244  3EFF               	addlw	-1
  1999  0245  1D03               	skipz
  2000  0246  2A41               	goto	u69_25
  2001  0247  3001               	movlw	1
  2002  0248  02A7               	subwf	i1___lwdiv@counter,f
  2003  0249  1D03               	btfss	3,2
  2004  024A  2A2A               	goto	i1l881
  2005  024B                     i1l891:	
  2006  024B  0826               	movf	i1___lwdiv@quotient+1,w
  2007  024C  00A1               	movwf	?i1___lwdiv+1
  2008  024D  0825               	movf	i1___lwdiv@quotient,w
  2009  024E  00A0               	movwf	?i1___lwdiv
  2010  024F  0008               	return
  2011  0250                     __end_ofi1___lwdiv:	
  2012  007E                     btemp	set	126	;btemp
  2013  007E                     wtemp0	set	126


Data Sizes:
    Strings     68
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94     60      60
    BANK1            94      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 28
		 -> STR_3(CODE[18]), STR_2(CODE[28]), STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?i1_printf(BANK0[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Interrupcion in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod
    _putch->_UART_write
    ___lwmod->___lwdiv

Critical Paths under _Interrupcion in BANK0

    _Interrupcion->i1_printf
    i1_printf->i1___lwmod
    i1_putch->i1_UART_write
    i1___lwmod->i1___lwdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupcion in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1068
                                             56 BANK0      4     4      0
                          _UART_init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    18      2    1044
                                             44 BANK0     12    10      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             31 BANK0      1     1      0
                         _UART_write
 ---------------------------------------------------------------------------------
 (3) _UART_write                                           1     1      0      22
                                             30 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                             38 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                             30 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Interrupcion                                         6     6      0     900
                                             24 BANK0      6     6      0
                       i1_UART_write
                           i1_printf
 ---------------------------------------------------------------------------------
 (5) i1_printf                                            18    18      0     855
                                             14 BANK0     10    10      0
                          i1___lwdiv
                          i1___lwmod
                            i1_putch
 ---------------------------------------------------------------------------------
 (6) i1_putch                                              1     1      0      44
                                              1 BANK0      1     1      0
                       i1_UART_write
 ---------------------------------------------------------------------------------
 (7) i1_UART_write                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) i1___lwmod                                            6     2      4     211
                                              8 BANK0      6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i1___lwdiv                                            8     4      4     214
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_init
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _UART_write

 _Interrupcion (ROOT)
   i1_UART_write
   i1_printf
     i1___lwdiv
     i1___lwmod
       i1___lwdiv (ARG)
     i1_putch
       i1_UART_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            5E      0       0       3        0.0%
BANK0               5E     3C      3C       4       63.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            5E      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               5E      0       0       6        0.0%
ABS                  0      0       0       7        0.0%
DATA                 0      0       0       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 25 23:35:57 2019

                      pc 0002              __CFG_CP$OFF 0000                       l35 0325  
                     l93 00CA                       fsr 0004                      l831 01EC  
                    l841 020D                      l837 0202                      l829 01DE  
                    l853 0258                      l933 0036                      l855 0266  
                    l863 027F                      l961 0086                      l859 0274  
                    l971 0094                      l955 0069                      l939 004C  
                    l965 008E                      l949 0063                      l973 001D  
           __CFG_CPD$OFF 0000                      u525 01E1                      u615 026C  
                    u545 01ED                      u625 0275                      u555 01F9  
                    u565 0203                      u805 007C                      u595 025B  
                    u967 02E0                      fsr0 0004                      indf 0000  
           __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000                     l1059 02C5  
                   STR_1 01AC                     STR_2 0190                     STR_3 01C2  
                   i1l35 032F                     i1l52 02EF                     i1l55 0300  
                   i1l93 017F             __CFG_WRT$OFF 0000                     _main 02B8  
                   btemp 007E         i1UART_write@dato 0020                     start 0011  
        __end_ofi1_putch 0342                    ?_main 0020            __CFG_WDTE$OFF 0000  
        __end_of___lwdiv 0212          __end_of___lwmod 0284                    i1l903 028C  
                  i1l905 029A                    i1l913 02B3                    i1l909 02A8  
                  i1l881 022A                    i1l891 024B                    i1l981 00EB  
                  i1l887 0240                    i1l879 021C                    i1l987 0101  
                  i1l997 0118                    _RCREG 001A                    _SPBRG 0099  
                  u72_25 028F                    u65_25 021F                    u74_25 02A0  
                  u67_25 022B                    u75_25 02A9                    u68_25 0237  
                  u69_25 0241                    u88_25 0131                    _TXREG 0019  
          __CFG_PWRTE$ON 0000       i1___lwmod@dividend 002A       __size_of_UART_init 0013  
        __end_of_dpowers 0190              ?_UART_write 0020                    _putch 0334  
         __CFG_BOREN$OFF 0000                    pclath 000A            i1putch@txDato 0021  
                  status 0003                    wtemp0 007E       __size_ofi1___lwdiv 003E  
     __size_ofi1___lwmod 0034         __end_ofi1_printf 0180               i1printf@ap 0032  
        __initialization 0013             __end_of_main 02E7                   ??_main 0058  
                 ?_putch 0020                   i1l1003 011E                   i1l1013 0143  
                 i1l1021 00D2                   i1l1009 013B                   i1l1019 0149  
              ??i1_putch 0000            ?_Interrupcion 0020        __end_of_UART_init 0320  
              ??___lwdiv 0042                ??___lwmod 004A      __size_of_UART_write 000A  
                 _printf 0016        __end_ofi1___lwdiv 0250        __end_ofi1___lwmod 02B8  
                 saved_w 007E           ??_Interrupcion 0038  __end_of__initialization 0013  
            i1printf@val 0035           __pcstackCOMMON 0000            ?i1_UART_write 0020  
          __end_of_putch 033B           _OPTION_REGbits 0081                ?i1_printf 0020  
                ??_putch 0000               __pmaintext 02B8           ??i1_UART_write 0000  
             __pintentry 0004                  ?_printf 004C               ??i1_printf 002E  
           ??_UART_write 0000               __stringtab 0180                  i1_putch 033B  
                ___lwdiv 01D4                  ___lwmod 0250       __end_of_UART_write 032A  
                __ptext1 0016                  __ptext2 0334                  __ptext3 0320  
                __ptext4 0250                  __ptext5 01D4                  __ptext6 030D  
                __ptext7 02E7                  __ptext8 00CB                  __ptext9 033B  
   __end_of_Interrupcion 030D          __size_of_printf 00B5                  _dpowers 0186  
      i1___lwdiv@divisor 0020        i1___lwdiv@counter 0027     end_of_initialization 0013  
              _RCSTAbits 0018                  printf@c 0057                  printf@f 0054  
              _UART_init 030D                _TRISCbits 0087                i1___lwdiv 0212  
              i1___lwmod 0284     __end_ofi1_UART_write 0334                _TXSTAbits 0098  
           i1printf@flag 0033               main@numero 005B             i1printf@prec 0034  
     Interrupcion@dataRX 003D        i1___lwmod@divisor 0028               ?_UART_init 0020  
      i1___lwmod@counter 002D           __end_of_printf 00CB      start_initialization 0013  
              i1printf@c 0037                i1printf@f 0031               ?i1___lwdiv 0020  
             ?i1___lwmod 0028        __size_ofi1_printf 00B5              putch@txDato 003F  
  __size_of_Interrupcion 0026                 ??_printf 004E                ___latbits 0001  
          __pcstackBANK0 0020                 ?i1_putch 0020             _Interrupcion 02E7  
       ___lwdiv@dividend 0040                 ?___lwdiv 003E                 ?___lwmod 0046  
              __pstrings 0180              ??_UART_init 0000    __size_ofi1_UART_write 000A  
       ___lwdiv@quotient 0043              ??i1___lwdiv 0024              ??i1___lwmod 002C  
         __size_of_putch 0007        interrupt_function 0004                 _PIE1bits 008C  
               _PIR1bits 000C             i1_UART_write 032A              __stringbase 0185  
             printf@flag 0052           UART_write@dato 003E               printf@prec 0053  
               i1_printf 00CB         __size_ofi1_putch 0007         __size_of___lwdiv 003E  
       __size_of___lwmod 0034       __end_of__stringtab 0186          ___lwdiv@divisor 003E  
        ___lwdiv@counter 0045                 __ptext10 032A                 __ptext11 0284  
               __ptext12 0212       i1___lwdiv@dividend 0022            __size_of_main 002F  
              printf@val 0055       i1___lwdiv@quotient 0025               _INTCONbits 000B  
               intlevel1 0000         ___lwmod@dividend 0048                stringcode 0180  
               printf@ap 0051          ___lwmod@divisor 0046          ___lwmod@counter 004B  
               stringdir 0180                 stringtab 0180               _UART_write 0320  
